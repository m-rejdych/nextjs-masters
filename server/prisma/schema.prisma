// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider    = "prisma-pothos-types"
  prismaUtils = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String           @id @default(uuid())
  name        String
  description String
  slug        String           @unique
  price       Int
  rating      Float            @default(0)
  images      ProductImage[]
  colors      ColorOnProduct[]
  sizes       SizeOnProduct[]
  details     Detail[]
  categories  Category[]
  collections Collection[]
  orderItems  OrderItem[]
  reviews     Review[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model ProductImage {
  id        String  @id @default(uuid())
  url       String
  alt       String
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Color {
  id        String           @id @default(uuid())
  name      ColorName        @unique
  products  ColorOnProduct[]
  OrderItem OrderItem[]
}

model Size {
  id        String          @id @default(uuid())
  type      SizeType        @unique
  products  SizeOnProduct[]
  OrderItem OrderItem[]
}

model ColorOnProduct {
  inStock   Boolean
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  colorId   String
  color     Color   @relation(fields: [colorId], references: [id], onDelete: Cascade)

  @@id([productId, colorId])
}

model SizeOnProduct {
  inStock   Boolean
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  sizeId    String
  size      Size    @relation(fields: [sizeId], references: [id], onDelete: Cascade)

  @@id([productId, sizeId])
}

model Detail {
  id          String  @id @default(uuid())
  description String
  productId   String
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Category {
  id          String         @id @default(uuid())
  name        CategoryName   @unique
  description String
  slug        String         @unique
  image       CategoryImage?
  products    Product[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model CategoryImage {
  id         String   @id @default(uuid())
  url        String
  alt        String
  categoryId String   @unique
  category   Category @relation(fields: [categoryId], references: [id])
}

model Collection {
  id          String           @id @default(uuid())
  name        CollectionName   @unique
  description String
  slug        String           @unique
  image       CollectionImage?
  products    Product[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model CollectionImage {
  id         String     @id @default(uuid())
  url        String
  alt        String
  categoryId String     @unique
  collection Collection @relation(fields: [categoryId], references: [id])
}

model Review {
  id          String   @id @default(uuid())
  author      String
  email       String
  title       String
  description String
  rating      Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id        String      @id @default(uuid())
  status    OrderStatus @default(CREATED)
  items     OrderItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid())
  quantity  Int      @default(1)
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  sizeId    String
  size      Size     @relation(fields: [sizeId], references: [id], onDelete: Cascade)
  colorId   String
  color     Color    @relation(fields: [colorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CategoryName {
  BASICS
  HOODIES
  SHIRTS
  JACKETS
}

enum CollectionName {
  NEW_ARRIVALS
  SPORT
  BEAUTY
  ACCESSORIES
}

enum ColorName {
  BLACK
  GRAY
}

enum SizeType {
  S
  M
  L
  XL
}

enum OrderStatus {
  CANCELLED
  CREATED
  FULFILLED
  PAID
}
